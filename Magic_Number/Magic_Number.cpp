#include <iostream>
#include <locale.h>
#include <windows.h>    // для задержки
#include <stdlib.h>     // чтобы очистить экран в нужный момент и не только
#include <time.h>
using namespace std;

/* time.h это библиотека работы со временем, например узнать текущую дату, часовой пояс, время текущее.. В этой библиотеке есть одна функция time(), которая возвращает
время - количество милисекунд, прошедших с определенной даты. А принимает она в качестве параметра (т.е. внутри ее круглых скобочек) сложные вещи, одна из коорых NULL
(начало). Этой командой мы сообщаем что нам нужно сдвинуть ГСЧ на количество милисекунд, прошедших с начала времен 00:00:00 (01.01.1970). Все даты до этой даты идут в
минус, а после нее идут в плюс.

Программа будет загадывать число от 1 до 9, а мы будем пытаться его угадать за 5 попыток.
Чтобы сыграть несколько раз нам нужно поместить программу в цикл. В какой цикл? do_while тут подойдет лучше всего, т.к. один раз пользователь все же сыграет, а даль-
ше мы не знаем сколько раз пользователь будет играть. Создадим цикл повторной игры.

По поводу обнуления переменных при новой игре. answer запрашивается внизу и проверяется в цикле while, его обнулять нет никакого смысла. magicnumber будет генерировать-
ся случайным образом, поэтому обнулять его не нужно. А playernumber будет вводиться с клавиатуры, поэтому и его обнулять не нужно. Добавим выбор уровня сложности.

Генерация случайного числа (ГСЧ) - генератор генерирует целое положительное число двухбайтовое! (до 32к)
Не существует в мире ничего случайного. ГСЧ - это мат.формула, в которой много коэффициентов, исходя из которых происходят вычисления. Но эти коэффициенты всегда одина-
ковые! Чтобы число стало случайным, нам нужно на функцию rand() как-то повлиять. У ГСЧ есть начальное стартовое значение, на который мы можем повлиять, т.е. сообщить
чтобы ГСЧ начал свои вычисления отталкиваясь от определенного сдвига (srand - сдвинуть rand). Если мы просто добавим число, скажем 5, то мы не получим сдвиг на 5, т.к.
там не такая простая формула, а лишь изменим числа. Числа будут другие, но все же одинаковые при новых пусках программы, т.к. мы сдвигаем ГСЧ на постоянную величину,
сдед. генерация будет одна и таже. Нам нужно сдвинуть на переменную величину, которая всегда случайна, например на время, сдед, нужно привязать ГСЧ ко времени. Чтобы
работать со временем нужна спец. библиотека, которая содержит в себе механизмы работы со временем (time.h).

Чем сложнее сдвиг, тем больше мы учитываем коэффициетнов, тем сложнее предугадать число. Сюда можно добавить температуру, давление, силу ветра, другие трудно контролли-
руемые величины... увеличивающие случайность числа. Теперь нам надо сделать нужный диапазон от 1 до 9 как в задании. Чтобы нам генерировать числа от 1 до 9 нам нужно
что-то сделать..    Если взять целое число Х и взять от него остаток от деления, скажем на 3, какой может быть результат?
У нас будет 0, 1, 2. Если число делится на цело, мы получим 0. Если делится с остатком 1, мы получим 1. Если делится с остатком 2, мы получим 2. А именно:

            Х % 3
            3 % 3
            4 % 3
            5 % 3
            6 % 3
            0 1 2

Логика:
Если мы берем число с остатком от деления этого числа на какую-то цифру, мы получаем от нуля до этого числа. След, если я возьму какое-то число и возьму остаток от де-
ления его на 9 (Х % 9), у меня будут варианты от 0 до 8 включительно. А в нашем случае еще нужен сдвиг на 1. Т.е. если взять остаток от деления на 9 и +1 (Х % 9 + 1),
мы получим необходимый диапазон. Т.о. мы к тому что выдал нам ГСЧ применим остаток от деления на 9 и прибавим 1. Т.о. получим необх.диапазон.

Для практики: rand()%10; мы получим от 0 до 9 включительно.
Т.о. на ГСЧ мы можем умножать, делить, складывать, производить лог.операции и прочие мат.действия, НО в ГСЧ пишется только целое число или приведенное к нему, т.к. в
саму функцию srand м/б помещено только целое положительное число, а получить его можно как угодно, домножить, разделить, взять корень..., придумать что-то сложнее, что-
бы усложнить генерацию числа.

Рассмотрим ввод пользователем числа, всего 5 попыток! 5 раз будет повторяться одна и таже последовательность действий. Плюс нам нужно не только ввести число, но и срав-
нить выпавшие. Т.к. мы знаем точное количество повторений, то лучше взять цикл for. Плюс каждая попытка состоит из пользовательского ввода. Проверим пользовательский
ввод на диапазон значений, чтобы пользователь не вводил числа вне диапазона. Воспользуемся для этого циклом do_while внутри цикла for. */

int main()
{
    setlocale(LC_ALL, "rus");
    srand(time(NULL));                       // сдвиг ГСЧ на количество милисекунд, прошедших с начала времен
    int magicnumber = 0;                     // для хранения загаданного числа
    int playernumber = 0;                    // для хранения числа введенного игроком
    char answer = 'Y';                       // для хранения ответа на вопрос о продолжении игры    
    do
    {
        system("cls");                       // очистка экрана перед новой игрой
        cout << "-------------------------------------------------Угадай число от 1 до 9 за пять попыток------------------------------------------------------" << endl;
        magicnumber = rand() % 9 + 1;
        // cout << magicnumber << endl;

        for (int i = 1; i <= 5; i++)                                            // цикл попыток i = 1, 2, 3, 4, 5
        {
            do                                                                  // цикл ввода числа игроком
            {
                cout << "Номер попытки " << i << endl;
                cout << "Введите число от 1 до 9: "; cin >> playernumber;
                if (playernumber < 1 || playernumber > 9)
                {
                    cout << "Некорректный ввод, попробуйте еще раз!" << endl;   // за неправильный ввод надо забрать попытку!
                    if (i == 5)break;                                           // если попытка была последняя, выйдем из цикла do_while, в цикле for проверим условие и
                    else i++;                                                   // т.к. i = 5, то при увелицении i на 1, мы выйдем из цикла for, а след, выйдем из игры
                }                                                               // в противном случае мы увеличиваем счетчик и тем самым уменьшаем количество попыток                

            } while (playernumber < 1 || playernumber > 9);

            if (magicnumber == playernumber)
            {
                cout << "Поздравляем! Вы отгадали число " << magicnumber << " c " << i << " попытки" << endl;
                break;                                                          // выходим из цикла попыток for()
            }
            else                                                                // если не угадали число
                if (i == 5)cout << "Вы проиграли! Загаданное число: " << magicnumber << endl;
                else cout << "Вы не угадали! У вас осталось " << 5 - i << " попытки(а)" << endl;
        }
        cout << "Сыграем еще? (Y/N)?"; cin >> answer;
    } while (answer == 'Y' || answer == 'y');
    // играем до тех пор пока игрок отвечает "да" на вопрос о продолжении игры
    cout << "Игра закончена. До новых встреч!" << endl;
    Sleep(1000);
}

/* Каждая программа состоит из набора блоков/модулей - компонентов, которые отвечают за одно каке-то действие, направление либо за какую-то конкретную механику.
      Что должна делать программа?
   1. Механизм загадывания числа - программа должна загадать число
   2. Ввод числа от пользователя
   3. Сравнение введенного и загаданного числа
   4. Определение результата
   5. Механизм повторной игры (реиграбельность) */

   /*  Добавить в игру выбор уровней сложности и реализовать каждый
   Добавить легкий режим перед ГСЧ, в котором будут подсказки. В момент сравнения загаданного числа (если равны, то можно добавить в его else
   что если введенное число больше чем загаданное, то сообщить пользователю, ваше число больше чем загаданное. Если введенное число меньше чем загаданное, добавить
   фразу что ваше число меньше чем загаданное.
   Уровень сложности вводится через switch. После строки с заголовком и перед ГСЧ.
   Сделать вариант для числа не от 1 до 9, а большего диапазона до 20 или 15...
   Или уменьшить количество попыток не 5, а 3, сделать их с помощью переменной, ввести новую и везде где было 5 поставить эту переменную. */